/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IScribe,
  IScribeInterface,
} from "../../../../contracts/vendor/chronicle/IScribe";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "numberSigners",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "bar",
        type: "uint8",
      },
    ],
    name: "BarNotReached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "givenAge",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "currentTimestamp",
        type: "uint32",
      },
    ],
    name: "FutureMessage",
    type: "error",
  },
  {
    inputs: [],
    name: "SchnorrSignatureInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "SignerNotFeed",
    type: "error",
  },
  {
    inputs: [],
    name: "SignersNotOrdered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "givenAge",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "currentAge",
        type: "uint32",
      },
    ],
    name: "StaleMessage",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "oldBar",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "newBar",
        type: "uint8",
      },
    ],
    name: "BarUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "feed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "FeedDropped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "feed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "FeedLifted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "val",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "age",
        type: "uint32",
      },
    ],
    name: "Poked",
    type: "event",
  },
  {
    inputs: [],
    name: "bar",
    outputs: [
      {
        internalType: "uint8",
        name: "bar",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "val",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "age",
            type: "uint32",
          },
        ],
        internalType: "struct IScribe.PokeData",
        name: "pokeData",
        type: "tuple",
      },
    ],
    name: "constructPokeMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feedIndex",
        type: "uint256",
      },
    ],
    name: "drop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "feedIndexes",
        type: "uint256[]",
      },
    ],
    name: "drop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "feedRegistrationMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "feedRegistrationMessage",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "feeds",
    outputs: [
      {
        internalType: "bool",
        name: "isFeed",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "feedIndex",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "feeds",
    outputs: [
      {
        internalType: "bool",
        name: "isFeed",
        type: "bool",
      },
      {
        internalType: "address",
        name: "feed",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeds",
    outputs: [
      {
        internalType: "address[]",
        name: "feeds",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "feedIndexes",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "message",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "signature",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "commitment",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "signersBlob",
            type: "bytes",
          },
        ],
        internalType: "struct IScribe.SchnorrData",
        name: "schnorrData",
        type: "tuple",
      },
    ],
    name: "isAcceptableSchnorrSignatureNow",
    outputs: [
      {
        internalType: "bool",
        name: "ok",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFeeds",
    outputs: [
      {
        internalType: "uint256",
        name: "maxFeeds",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "peek",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "peep",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "val",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "age",
            type: "uint32",
          },
        ],
        internalType: "struct IScribe.PokeData",
        name: "pokeData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "signature",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "commitment",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "signersBlob",
            type: "bytes",
          },
        ],
        internalType: "struct IScribe.SchnorrData",
        name: "schnorrData",
        type: "tuple",
      },
    ],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "read",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "readWithAge",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "bar",
        type: "uint8",
      },
    ],
    name: "setBar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tryRead",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tryReadWithAge",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wat",
    outputs: [
      {
        internalType: "bytes32",
        name: "wat",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IScribe__factory {
  static readonly abi = _abi;
  static createInterface(): IScribeInterface {
    return new utils.Interface(_abi) as IScribeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IScribe {
    return new Contract(address, _abi, signerOrProvider) as IScribe;
  }
}
