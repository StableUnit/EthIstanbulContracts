/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IScribe {
  export type PokeDataStruct = {
    val: PromiseOrValue<BigNumberish>;
    age: PromiseOrValue<BigNumberish>;
  };

  export type PokeDataStructOutput = [BigNumber, number] & {
    val: BigNumber;
    age: number;
  };

  export type SchnorrDataStruct = {
    signature: PromiseOrValue<BytesLike>;
    commitment: PromiseOrValue<string>;
    signersBlob: PromiseOrValue<BytesLike>;
  };

  export type SchnorrDataStructOutput = [string, string, string] & {
    signature: string;
    commitment: string;
    signersBlob: string;
  };
}

export interface IScribeInterface extends utils.Interface {
  functions: {
    "bar()": FunctionFragment;
    "constructPokeMessage((uint128,uint32))": FunctionFragment;
    "decimals()": FunctionFragment;
    "drop(uint256)": FunctionFragment;
    "drop(uint256[])": FunctionFragment;
    "feedRegistrationMessage()": FunctionFragment;
    "feeds(address)": FunctionFragment;
    "feeds(uint256)": FunctionFragment;
    "feeds()": FunctionFragment;
    "isAcceptableSchnorrSignatureNow(bytes32,(bytes32,address,bytes))": FunctionFragment;
    "latestAnswer()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "maxFeeds()": FunctionFragment;
    "peek()": FunctionFragment;
    "peep()": FunctionFragment;
    "poke((uint128,uint32),(bytes32,address,bytes))": FunctionFragment;
    "read()": FunctionFragment;
    "readWithAge()": FunctionFragment;
    "setBar(uint8)": FunctionFragment;
    "tryRead()": FunctionFragment;
    "tryReadWithAge()": FunctionFragment;
    "wat()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bar"
      | "constructPokeMessage"
      | "decimals"
      | "drop(uint256)"
      | "drop(uint256[])"
      | "feedRegistrationMessage"
      | "feeds(address)"
      | "feeds(uint256)"
      | "feeds()"
      | "isAcceptableSchnorrSignatureNow"
      | "latestAnswer"
      | "latestRoundData"
      | "maxFeeds"
      | "peek"
      | "peep"
      | "poke"
      | "read"
      | "readWithAge"
      | "setBar"
      | "tryRead"
      | "tryReadWithAge"
      | "wat"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "constructPokeMessage",
    values: [IScribe.PokeDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drop(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drop(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "feedRegistrationMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeds(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeds(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "feeds()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAcceptableSchnorrSignatureNow",
    values: [PromiseOrValue<BytesLike>, IScribe.SchnorrDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxFeeds", values?: undefined): string;
  encodeFunctionData(functionFragment: "peek", values?: undefined): string;
  encodeFunctionData(functionFragment: "peep", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poke",
    values: [IScribe.PokeDataStruct, IScribe.SchnorrDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "read", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readWithAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBar",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "tryRead", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tryReadWithAge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wat", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "constructPokeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drop(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drop(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedRegistrationMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeds(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeds(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeds()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAcceptableSchnorrSignatureNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxFeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readWithAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryRead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tryReadWithAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wat", data: BytesLike): Result;

  events: {
    "BarUpdated(address,uint8,uint8)": EventFragment;
    "FeedDropped(address,address,uint256)": EventFragment;
    "FeedLifted(address,address,uint256)": EventFragment;
    "Poked(address,uint128,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BarUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeedDropped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeedLifted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Poked"): EventFragment;
}

export interface BarUpdatedEventObject {
  caller: string;
  oldBar: number;
  newBar: number;
}
export type BarUpdatedEvent = TypedEvent<
  [string, number, number],
  BarUpdatedEventObject
>;

export type BarUpdatedEventFilter = TypedEventFilter<BarUpdatedEvent>;

export interface FeedDroppedEventObject {
  caller: string;
  feed: string;
  index: BigNumber;
}
export type FeedDroppedEvent = TypedEvent<
  [string, string, BigNumber],
  FeedDroppedEventObject
>;

export type FeedDroppedEventFilter = TypedEventFilter<FeedDroppedEvent>;

export interface FeedLiftedEventObject {
  caller: string;
  feed: string;
  index: BigNumber;
}
export type FeedLiftedEvent = TypedEvent<
  [string, string, BigNumber],
  FeedLiftedEventObject
>;

export type FeedLiftedEventFilter = TypedEventFilter<FeedLiftedEvent>;

export interface PokedEventObject {
  caller: string;
  val: BigNumber;
  age: number;
}
export type PokedEvent = TypedEvent<
  [string, BigNumber, number],
  PokedEventObject
>;

export type PokedEventFilter = TypedEventFilter<PokedEvent>;

export interface IScribe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IScribeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bar(overrides?: CallOverrides): Promise<[number] & { bar: number }>;

    constructPokeMessage(
      pokeData: IScribe.PokeDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decimals(
      overrides?: CallOverrides
    ): Promise<[number] & { decimals: number }>;

    "drop(uint256)"(
      feedIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "drop(uint256[])"(
      feedIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feedRegistrationMessage(
      overrides?: CallOverrides
    ): Promise<[string] & { feedRegistrationMessage: string }>;

    "feeds(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isFeed: boolean; feedIndex: BigNumber }
    >;

    "feeds(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isFeed: boolean; feed: string }>;

    "feeds()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { feeds: string[]; feedIndexes: BigNumber[] }
    >;

    isAcceptableSchnorrSignatureNow(
      message: PromiseOrValue<BytesLike>,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { ok: boolean }>;

    latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    maxFeeds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxFeeds: BigNumber }>;

    peek(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { value: BigNumber; isValid: boolean }>;

    peep(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { value: BigNumber; isValid: boolean }>;

    poke(
      pokeData: IScribe.PokeDataStruct,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    read(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    readWithAge(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; age: BigNumber }>;

    setBar(
      bar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tryRead(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { isValid: boolean; value: BigNumber }>;

    tryReadWithAge(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isValid: boolean;
        value: BigNumber;
        age: BigNumber;
      }
    >;

    wat(overrides?: CallOverrides): Promise<[string] & { wat: string }>;
  };

  bar(overrides?: CallOverrides): Promise<number>;

  constructPokeMessage(
    pokeData: IScribe.PokeDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "drop(uint256)"(
    feedIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "drop(uint256[])"(
    feedIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feedRegistrationMessage(overrides?: CallOverrides): Promise<string>;

  "feeds(address)"(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { isFeed: boolean; feedIndex: BigNumber }>;

  "feeds(uint256)"(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { isFeed: boolean; feed: string }>;

  "feeds()"(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { feeds: string[]; feedIndexes: BigNumber[] }
  >;

  isAcceptableSchnorrSignatureNow(
    message: PromiseOrValue<BytesLike>,
    schnorrData: IScribe.SchnorrDataStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  maxFeeds(overrides?: CallOverrides): Promise<BigNumber>;

  peek(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { value: BigNumber; isValid: boolean }>;

  peep(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { value: BigNumber; isValid: boolean }>;

  poke(
    pokeData: IScribe.PokeDataStruct,
    schnorrData: IScribe.SchnorrDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  read(overrides?: CallOverrides): Promise<BigNumber>;

  readWithAge(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { value: BigNumber; age: BigNumber }>;

  setBar(
    bar: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tryRead(
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { isValid: boolean; value: BigNumber }>;

  tryReadWithAge(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isValid: boolean;
      value: BigNumber;
      age: BigNumber;
    }
  >;

  wat(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bar(overrides?: CallOverrides): Promise<number>;

    constructPokeMessage(
      pokeData: IScribe.PokeDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "drop(uint256)"(
      feedIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "drop(uint256[])"(
      feedIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    feedRegistrationMessage(overrides?: CallOverrides): Promise<string>;

    "feeds(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isFeed: boolean; feedIndex: BigNumber }
    >;

    "feeds(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isFeed: boolean; feed: string }>;

    "feeds()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { feeds: string[]; feedIndexes: BigNumber[] }
    >;

    isAcceptableSchnorrSignatureNow(
      message: PromiseOrValue<BytesLike>,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    maxFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    peek(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { value: BigNumber; isValid: boolean }>;

    peep(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { value: BigNumber; isValid: boolean }>;

    poke(
      pokeData: IScribe.PokeDataStruct,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    read(overrides?: CallOverrides): Promise<BigNumber>;

    readWithAge(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; age: BigNumber }>;

    setBar(
      bar: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tryRead(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { isValid: boolean; value: BigNumber }>;

    tryReadWithAge(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isValid: boolean;
        value: BigNumber;
        age: BigNumber;
      }
    >;

    wat(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BarUpdated(address,uint8,uint8)"(
      caller?: PromiseOrValue<string> | null,
      oldBar?: null,
      newBar?: null
    ): BarUpdatedEventFilter;
    BarUpdated(
      caller?: PromiseOrValue<string> | null,
      oldBar?: null,
      newBar?: null
    ): BarUpdatedEventFilter;

    "FeedDropped(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      feed?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null
    ): FeedDroppedEventFilter;
    FeedDropped(
      caller?: PromiseOrValue<string> | null,
      feed?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null
    ): FeedDroppedEventFilter;

    "FeedLifted(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      feed?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null
    ): FeedLiftedEventFilter;
    FeedLifted(
      caller?: PromiseOrValue<string> | null,
      feed?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null
    ): FeedLiftedEventFilter;

    "Poked(address,uint128,uint32)"(
      caller?: PromiseOrValue<string> | null,
      val?: null,
      age?: null
    ): PokedEventFilter;
    Poked(
      caller?: PromiseOrValue<string> | null,
      val?: null,
      age?: null
    ): PokedEventFilter;
  };

  estimateGas: {
    bar(overrides?: CallOverrides): Promise<BigNumber>;

    constructPokeMessage(
      pokeData: IScribe.PokeDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "drop(uint256)"(
      feedIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "drop(uint256[])"(
      feedIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feedRegistrationMessage(overrides?: CallOverrides): Promise<BigNumber>;

    "feeds(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeds(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeds()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAcceptableSchnorrSignatureNow(
      message: PromiseOrValue<BytesLike>,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    maxFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    peek(overrides?: CallOverrides): Promise<BigNumber>;

    peep(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      pokeData: IScribe.PokeDataStruct,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    read(overrides?: CallOverrides): Promise<BigNumber>;

    readWithAge(overrides?: CallOverrides): Promise<BigNumber>;

    setBar(
      bar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tryRead(overrides?: CallOverrides): Promise<BigNumber>;

    tryReadWithAge(overrides?: CallOverrides): Promise<BigNumber>;

    wat(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    constructPokeMessage(
      pokeData: IScribe.PokeDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "drop(uint256)"(
      feedIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "drop(uint256[])"(
      feedIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feedRegistrationMessage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeds(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeds(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAcceptableSchnorrSignatureNow(
      message: PromiseOrValue<BytesLike>,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      pokeData: IScribe.PokeDataStruct,
      schnorrData: IScribe.SchnorrDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    read(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readWithAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBar(
      bar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tryRead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tryReadWithAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wat(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
